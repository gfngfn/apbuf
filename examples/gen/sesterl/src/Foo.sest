/* Auto-generated by APBuf 0.0.2 */
module Foo = struct
  type article_info = { book_title : binary, number : option<int>, volume : int }

  and bib<$x> = { author : list<$x>, bib_type : bib_type<bool>, title : binary }

  and bib_type<$s> =  | Article(article_info) | InProceedings(inproceedings_info) | NoBib | Special($s)

  and dummy = {  }

  and inproceedings_info = { conference : binary }

  val rec decode_article_info() : Json.Decode.t<article_info> = Json.Decode.bind(Json.Decode.field("book_title", decode_string()), (fun(local_key_book_title) -> Json.Decode.bind(Json.Decode.field("number", decode_option(decode_int())), (fun(local_key_number) -> Json.Decode.bind(Json.Decode.field("volume", decode_int()), (fun(local_key_volume) -> Json.Decode.pure({ book_title = local_key_book_title, number = local_key_number, volume = local_key_volume }) end)) end)) end))

  and encode_article_info() : fun(article_info) -> Json.Encode.t = (fun(local_param_temp) -> Json.Encode.object_from_list([ {"book_title", encode_string()(local_param_temp.book_title)}, {"number", encode_option(encode_int())(local_param_temp.number)}, {"volume", encode_int()(local_param_temp.volume)} ]) end)

  and decode_bib<$x>(local_param_x : Json.Decode.t<$x>) : Json.Decode.t<bib<$x>> = Json.Decode.bind(Json.Decode.field("author", decode_list(local_param_x)), (fun(local_key_author) -> Json.Decode.bind(Json.Decode.field("bib_type", decode_bib_type(decode_bool())), (fun(local_key_bib_type) -> Json.Decode.bind(Json.Decode.field("title", decode_string()), (fun(local_key_title) -> Json.Decode.pure({ author = local_key_author, bib_type = local_key_bib_type, title = local_key_title }) end)) end)) end))

  and encode_bib<$x>(local_param_x : fun($x) -> Json.Encode.t) : fun(bib<$x>) -> Json.Encode.t = (fun(local_param_temp) -> Json.Encode.object_from_list([ {"author", encode_list(local_param_x)(local_param_temp.author)}, {"bib_type", encode_bib_type(encode_bool())(local_param_temp.bib_type)}, {"title", encode_string()(local_param_temp.title)} ]) end)

  and decode_bib_type<$s>(local_param_s : Json.Decode.t<$s>) : Json.Decode.t<bib_type<$s>> = Json.Decode.bind(Json.Decode.field("_label", Json.Decode.string()), (fun(temp) -> (case temp of  | "Article" -> Json.Decode.field("_arg", Json.Decode.map((fun(local_param_temp) -> Article(local_param_temp) end), decode_article_info())) | "InProceedings" -> Json.Decode.field("_arg", Json.Decode.map((fun(local_param_temp) -> InProceedings(local_param_temp) end), decode_inproceedings_info())) | "NoBib" -> Json.Decode.pure(NoBib) | "Special" -> Json.Decode.field("_arg", Json.Decode.map((fun(local_param_temp) -> Special(local_param_temp) end), local_param_s)) | other -> Json.Decode.fail(other) end) end))

  and encode_bib_type<$s>(local_param_s : fun($s) -> Json.Encode.t) : fun(bib_type<$s>) -> Json.Encode.t = (fun(temp) -> (case temp of  | Article(sub) -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("Article")}, {"_arg", encode_article_info()(sub)} ]) | InProceedings(sub) -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("InProceedings")}, {"_arg", encode_inproceedings_info()(sub)} ]) | NoBib -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("NoBib")} ]) | Special(sub) -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("Special")}, {"_arg", local_param_s(sub)} ]) end) end)

  and decode_bool() : Json.Decode.t<bool> = Json.Decode.bool()

  and encode_bool() : fun(bool) -> Json.Encode.t = Json.Encode.bool()

  and decode_dummy() : Json.Decode.t<dummy> = Json.Decode.pure({  })

  and encode_dummy() : fun(dummy) -> Json.Encode.t = (fun(local_param_temp) -> Json.Encode.object_from_list([  ]) end)

  and decode_inproceedings_info() : Json.Decode.t<inproceedings_info> = Json.Decode.bind(Json.Decode.field("conference", decode_string()), (fun(local_key_conference) -> Json.Decode.pure({ conference = local_key_conference }) end))

  and encode_inproceedings_info() : fun(inproceedings_info) -> Json.Encode.t = (fun(local_param_temp) -> Json.Encode.object_from_list([ {"conference", encode_string()(local_param_temp.conference)} ]) end)

  and decode_int() : Json.Decode.t<int> = Json.Decode.int()

  and encode_int() : fun(int) -> Json.Encode.t = Json.Encode.int()

  and decode_list<$a>(x : Json.Decode.t<$a>) : Json.Decode.t<list<$a>> = Json.Decode.list(x)

  and encode_list<$a>(x : fun($a) -> Json.Encode.t) : fun(list<$a>) -> Json.Encode.t = Json.Encode.list(x)

  and decode_option<$a>(x : Json.Decode.t<$a>) : Json.Decode.t<option<$a>> = Json.Decode.bind(Json.Decode.field("_label", Json.Decode.string()), (fun(temp) -> (case temp of  | "None" -> Json.Decode.pure(Nothing) | "Some" -> Json.Decode.field("_arg", Json.Decode.map(Just, x)) | other -> Json.Decode.fail(other) end) end))

  and encode_option<$a>(x : fun($a) -> Json.Encode.t) : fun(option<$a>) -> Json.Encode.t = (fun(opt) -> (case opt of  | Nothing -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("None")} ]) | Just(sub) -> Json.Encode.object_from_list([ {"_label", Json.Encode.string("Some")}, {"_arg", x(sub)} ]) end) end)

  and decode_string() : Json.Decode.t<binary> = Json.Decode.string()

  and encode_string() : fun(binary) -> Json.Encode.t = Json.Encode.string()

end
